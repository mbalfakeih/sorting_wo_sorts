% Refutation found. Thanks to Tanya!
% SZS status Unsatisfiable for conjecture
% SZS output start Proof for conjecture
9. (sorted(X0,X1) = $match(X1,'Nil'(X0),$true,'Cons'(X0,X2,X3),list_ge_elem(X0,X3,X2) & sorted(X0,X3))) [input]
11. isort(X0,X1) = $match(X1,'Nil'(X0),'Nil'(X0),'Cons'(X0,X2,X3),insort(X0,X2,isort(X0,X3))) [input]
12. ! [X0 : $tType] : ! [X1 : X0,X2 : 'list()'(X0)] : (sorted(X0,X2) => sorted(X0,insort(X0,X1,X2))) [input]
13. ! [X0 : $tType] : ! [X1 : 'list()'(X0)] : sorted(X0,isort(X0,X1)) [input]
14. ~! [X0 : $tType] : ! [X1 : 'list()'(X0)] : sorted(X0,isort(X0,X1)) [negated conjecture 13]
21. ! [X3 : 'list()'(X0),X2 : X0,X1 : 'list()'(X0),X0 : $tType] : (sorted(X0,X1) = $match(X1,'Nil'(X0),$true,'Cons'(X0,X2,X3),list_ge_elem(X0,X3,X2) & sorted(X0,X3))) [closure 9]
22. ! [X0 : $tType,X2 : X0,X3 : 'list()'(X0),X1 : 'list()'(X0)] : ('Nil'(X0) = X1 => (mG0(X0,X2,X3,X1) <=> $true)) [fool $match elimination 21]
24. ! [X3 : 'list()'(X0),X2 : X0,X1 : 'list()'(X0),X0 : $tType] : (sorted(X0,X1) <=> mG0(X0,X2,X3,X1)) [fool elimination 21]
29. ! [X3 : 'list()'(X0),X2 : X0,X1 : 'list()'(X0),X0 : $tType] : isort(X0,X1) = $match(X1,'Nil'(X0),'Nil'(X0),'Cons'(X0,X2,X3),insort(X0,X2,isort(X0,X3))) [closure 11]
30. ! [X0 : $tType,X3 : 'list()'(X0),X2 : X0,X1 : 'list()'(X0)] : ('Nil'(X0) = X1 => 'Nil'(X0) = mG2(X0,X3,X2,X1)) [fool $match elimination 29]
31. ! [X0 : $tType,X3 : 'list()'(X0),X2 : X0,X1 : 'list()'(X0)] : ('Cons'(X0,X2,X3) = X1 => insort(X0,X2,isort(X0,X3)) = mG2(X0,X3,X2,X1)) [fool $match elimination 29]
32. ! [X3 : 'list()'(X0),X2 : X0,X1 : 'list()'(X0),X0 : $tType] : isort(X0,X1) = mG2(X0,X3,X2,X1) [fool elimination 29]
44. ! [X0 : $tType,X1 : 'list()'(X0),X2 : X0,X3 : 'list()'(X0)] : ('Cons'(X0,X2,X1) = X3 => insort(X0,X2,isort(X0,X1)) = mG2(X0,X1,X2,X3)) [rectify 31]
45. ! [X0 : $tType,X1 : 'list()'(X0),X2 : X0,X3 : 'list()'(X0)] : ('Nil'(X0) = X3 => 'Nil'(X0) = mG2(X0,X1,X2,X3)) [rectify 30]
51. ! [X0 : $tType,X1 : X0,X2 : 'list()'(X0),X3 : 'list()'(X0)] : ('Nil'(X0) = X3 => (mG0(X0,X1,X2,X3) <=> $true)) [rectify 22]
52. ! [X0 : $tType,X1 : X0,X2 : 'list()'(X0),X3 : 'list()'(X0)] : ('Nil'(X0) = X3 => mG0(X0,X1,X2,X3)) [true and false elimination 51]
53. ~! [X0 : $tType,X1 : 'list()'(X0)] : sorted(X0,isort(X0,X1)) [flattening 14]
54. ! [X0 : 'list()'(X3),X1 : X3,X2 : 'list()'(X3),X3 : $tType] : (sorted(X3,X2) <=> mG0(X3,X1,X0,X2)) [rectify 24]
56. ! [X0 : 'list()'(X3),X1 : X3,X2 : 'list()'(X3),X3 : $tType] : isort(X3,X2) = mG2(X3,X0,X1,X2) [rectify 32]
62. ! [X0 : $tType,X1 : X0,X2 : 'list()'(X0)] : (sorted(X0,X2) => sorted(X0,insort(X0,X1,X2))) [flattening 12]
75. ! [X0 : $tType,X1 : 'list()'(X0),X2 : X0,X3 : 'list()'(X0)] : (insort(X0,X2,isort(X0,X1)) = mG2(X0,X1,X2,X3) | 'Cons'(X0,X2,X1) != X3) [ennf transformation 44]
76. ! [X0 : $tType,X1 : 'list()'(X0),X2 : X0,X3 : 'list()'(X0)] : ('Nil'(X0) = mG2(X0,X1,X2,X3) | 'Nil'(X0) != X3) [ennf transformation 45]
80. ! [X0 : $tType,X1 : X0,X2 : 'list()'(X0),X3 : 'list()'(X0)] : (mG0(X0,X1,X2,X3) | 'Nil'(X0) != X3) [ennf transformation 52]
81. ? [X0 : $tType,X1 : 'list()'(X0)] : ~sorted(X0,isort(X0,X1)) [ennf transformation 53]
82. ! [X0 : $tType,X1 : X0,X2 : 'list()'(X0)] : (sorted(X0,insort(X0,X1,X2)) | ~sorted(X0,X2)) [ennf transformation 62]
91. ? [X0 : $tType,X1 : 'list()'(X0)] : ~sorted(X0,isort(X0,X1)) => ~sorted(sK5,isort(sK5,sK6)) [choice axiom]
92. ~sorted(sK5,isort(sK5,sK6)) [skolemisation 81,91]
93. ! [X0 : 'list()'(X3),X1 : X3,X2 : 'list()'(X3),X3 : $tType] : ((sorted(X3,X2) | ~mG0(X3,X1,X0,X2)) & (mG0(X3,X1,X0,X2) | ~sorted(X3,X2))) [nnf transformation 54]
103. insort(X0,X2,isort(X0,X1)) = mG2(X0,X1,X2,X3) | 'Cons'(X0,X2,X1) != X3 [cnf transformation 75]
104. 'Nil'(X0) = mG2(X0,X1,X2,X3) | 'Nil'(X0) != X3 [cnf transformation 76]
112. mG0(X0,X1,X2,X3) | 'Nil'(X0) != X3 [cnf transformation 80]
113. ~sorted(sK5,isort(sK5,sK6)) [cnf transformation 92]
115. ~mG0(X3,X1,X0,X2) | sorted(X3,X2) [cnf transformation 93]
118. isort(X3,X2) = mG2(X3,X0,X1,X2) [cnf transformation 56]
123. sorted(X0,insort(X0,X1,X2)) | ~sorted(X0,X2) [cnf transformation 82]
134. isort(X0,X3) = insort(X0,X2,isort(X0,X1)) | 'Cons'(X0,X2,X1) != X3 [definition unfolding 103,118]
135. 'Nil'(X0) = isort(X0,X3) | 'Nil'(X0) != X3 [definition unfolding 104,118]
138. insort(X0,X2,isort(X0,X1)) = isort(X0,'Cons'(X0,X2,X1)) [equality resolution 134]
139. 'Nil'(X0) = isort(X0,'Nil'(X0)) [equality resolution 135]
147. mG0(X0,X1,X2,'Nil'(X0)) [equality resolution 112]
156. ! [X2 : 'list()'(sK5),X1 : sK5] : ((sorted(sK5,isort(sK5,X2)) => sorted(sK5,isort(sK5,'Cons'(sK5,X1,X2)))) & sorted(sK5,isort(sK5,'Nil'(sK5)))) => ! [X4 : 'list()'(sK5)] : sorted(sK5,isort(sK5,X4)) [structural induction hypothesis (recursion)]
157. ! [X4 : 'list()'(sK5)] : sorted(sK5,isort(sK5,X4)) | ? [X2 : 'list()'(sK5),X1 : sK5] : ((~sorted(sK5,isort(sK5,'Cons'(sK5,X1,X2))) & sorted(sK5,isort(sK5,X2))) | ~sorted(sK5,isort(sK5,'Nil'(sK5)))) [ennf transformation 156]
158. ~sorted(sK5,isort(sK5,'Nil'(sK5))) | sorted(sK5,isort(sK5,sK10)) | sorted(sK5,isort(sK5,X4)) [cnf transformation 157]
159. ~sorted(sK5,isort(sK5,'Nil'(sK5))) | ~sorted(sK5,isort(sK5,'Cons'(sK5,sK11,sK10))) | sorted(sK5,isort(sK5,X4)) [cnf transformation 157]
162. ~sorted(sK5,isort(sK5,'Nil'(sK5))) | ~sorted(sK5,isort(sK5,'Cons'(sK5,sK11,sK10))) [induction hyperresolution 113,159]
163. ~sorted(sK5,isort(sK5,'Nil'(sK5))) | sorted(sK5,isort(sK5,sK10)) [induction hyperresolution 113,158]
164. ~sorted(sK5,'Nil'(sK5)) | sorted(sK5,isort(sK5,sK10)) [forward demodulation 163,139]
166. 1 <=> sorted(sK5,isort(sK5,sK10)) [avatar definition]
168. sorted(sK5,isort(sK5,sK10)) <- (1) [avatar component clause 166]
170. 2 <=> sorted(sK5,'Nil'(sK5)) [avatar definition]
172. ~sorted(sK5,'Nil'(sK5)) <- (~2) [avatar component clause 170]
173. 1 | ~2 [avatar split clause 164,170,166]
174. ~sorted(sK5,'Nil'(sK5)) | ~sorted(sK5,isort(sK5,'Cons'(sK5,sK11,sK10))) [forward demodulation 162,139]
175. ~sorted(sK5,insort(sK5,sK11,isort(sK5,sK10))) | ~sorted(sK5,'Nil'(sK5)) [forward demodulation 174,138]
177. 3 <=> sorted(sK5,insort(sK5,sK11,isort(sK5,sK10))) [avatar definition]
179. ~sorted(sK5,insort(sK5,sK11,isort(sK5,sK10))) <- (~3) [avatar component clause 177]
180. ~2 | ~3 [avatar split clause 175,177,170]
197. sorted(X0,'Nil'(X0)) [resolution 115,147]
199. $false <- (~2) [resolution 197,172]
200. 2 [avatar contradiction clause 199]
202. ~sorted(sK5,isort(sK5,sK10)) <- (~3) [resolution 179,123]
215. $false <- (1, ~3) [subsumption resolution 202,168]
216. ~1 | 3 [avatar contradiction clause 215]
251. $false [avatar sat refutation 173,180,200,216]
% SZS output end Proof for conjecture
% ------------------------------
% Version: Vampire 4.7 (commit )
% Linked with Z3 4.9.1.0  NOTFOUND
% Termination reason: Refutation

% Memory used [KB]: 5117
% Time elapsed: 0.003 s
% ------------------------------
% ------------------------------
