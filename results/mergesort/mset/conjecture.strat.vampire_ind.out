% Refutation found. Thanks to Tanya!
% SZS status Unsatisfiable for conjecture
% SZS output start Proof for conjecture
7. len(X0,X1) = $match(X1,'Nil'(X0),zero,'Cons'(X0,X2,X3),s(len(X0,X3))) [input]
10. take(X0,X1,X2) = $match(X1,zero,'Nil'(X0),s(X3),$match(X2,'Nil'(X0),'Nil'(X0),'Cons'(X0,X4,X5),'Cons'(X0,X4,take(X0,X3,X5)))) [input]
11. drop(X0,X1,X2) = $match(X1,zero,X2,s(X3),$match(X2,'Nil'(X0),'Nil'(X0),'Cons'(X0,X4,X5),drop(X0,X3,X5))) [input]
12. mergesort(X0,X1) = $match(X1,'Nil'(X0),'Nil'(X0),'Cons'(X0,X2,X3),merge(X0,mergesort(X0,take(X0,div2(len(X0,X1)),X1)),mergesort(X0,drop(X0,div2(len(X0,X1)),X1)))) [input]
14. ! [X0 : $tType] : ! [X3 : 'list()'(X0),X1 : X0,X2 : 'list()'(X0)] : append(X0,filter_mset(X0,X1,X2),filter_mset(X0,X1,X3)) = filter_mset(X0,X1,merge(X0,X2,X3)) [input]
15. ! [X0 : $tType] : ! [X2 : 'nat()',X1 : X0,X3 : 'list()'(X0)] : filter_mset(X0,X1,X3) = append(X0,filter_mset(X0,X1,take(X0,X2,X3)),filter_mset(X0,X1,drop(X0,X2,X3))) [input]
16. ! [X0 : $tType] : ! [X1 : X0,X2 : 'list()'(X0)] : filter_mset(X0,X1,X2) = filter_mset(X0,X1,mergesort(X0,X2)) [input]
17. ~! [X0 : $tType] : ! [X1 : X0,X2 : 'list()'(X0)] : filter_mset(X0,X1,X2) = filter_mset(X0,X1,mergesort(X0,X2)) [negated conjecture 16]
35. ! [X3 : 'list()'(X0),X2 : X0,X1 : 'list()'(X0),X0 : $tType] : len(X0,X1) = $match(X1,'Nil'(X0),zero,'Cons'(X0,X2,X3),s(len(X0,X3))) [closure 7]
37. ! [X0 : $tType,X3 : 'list()'(X0),X2 : X0,X1 : 'list()'(X0)] : ('Cons'(X0,X2,X3) = X1 => s(len(X0,X3)) = mG2(X0,X3,X2,X1)) [fool $match elimination 35]
38. ! [X3 : 'list()'(X0),X2 : X0,X1 : 'list()'(X0),X0 : $tType] : len(X0,X1) = mG2(X0,X3,X2,X1) [fool elimination 35]
39. ! [X3 : 'list()'(X0),X2 : X0,X1 : 'list()'(X0),X0 : $tType] : mergesort(X0,X1) = $match(X1,'Nil'(X0),'Nil'(X0),'Cons'(X0,X2,X3),merge(X0,mergesort(X0,take(X0,div2(len(X0,X1)),X1)),mergesort(X0,drop(X0,div2(len(X0,X1)),X1)))) [closure 12]
40. ! [X0 : $tType,X1 : 'list()'(X0),X3 : 'list()'(X0),X2 : X0] : ('Nil'(X0) = X1 => 'Nil'(X0) = mG3(X0,X1,X3,X2)) [fool $match elimination 39]
41. ! [X0 : $tType,X1 : 'list()'(X0),X3 : 'list()'(X0),X2 : X0] : ('Cons'(X0,X2,X3) = X1 => merge(X0,mergesort(X0,take(X0,div2(len(X0,X1)),X1)),mergesort(X0,drop(X0,div2(len(X0,X1)),X1))) = mG3(X0,X1,X3,X2)) [fool $match elimination 39]
42. ! [X3 : 'list()'(X0),X2 : X0,X1 : 'list()'(X0),X0 : $tType] : mergesort(X0,X1) = mG3(X0,X1,X3,X2) [fool elimination 39]
51. ! [X5 : 'list()'(X0),X4 : X0,X3 : 'nat()',X2 : 'list()'(X0),X1 : 'nat()',X0 : $tType] : drop(X0,X1,X2) = $match(X1,zero,X2,s(X3),$match(X2,'Nil'(X0),'Nil'(X0),'Cons'(X0,X4,X5),drop(X0,X3,X5))) [closure 11]
52. ! [X0 : $tType,X5 : 'list()'(X0),X3 : 'nat()',X4 : X0,X2 : 'list()'(X0),X1 : 'nat()'] : (zero = X1 => mG7(X0,X5,X3,X4,X2,X1) = X2) [fool $match elimination 51]
54. ! [X0 : $tType,X5 : 'list()'(X0),X3 : 'nat()',X4 : X0,X2 : 'list()'(X0)] : ('Cons'(X0,X4,X5) = X2 => drop(X0,X3,X5) = mG8(X0,X5,X3,X4,X2)) [fool $match elimination 51]
55. ! [X0 : $tType,X5 : 'list()'(X0),X3 : 'nat()',X4 : X0,X2 : 'list()'(X0),X1 : 'nat()'] : (s(X3) = X1 => mG7(X0,X5,X3,X4,X2,X1) = mG8(X0,X5,X3,X4,X2)) [fool $match elimination 51]
56. ! [X5 : 'list()'(X0),X4 : X0,X3 : 'nat()',X2 : 'list()'(X0),X1 : 'nat()',X0 : $tType] : drop(X0,X1,X2) = mG7(X0,X5,X3,X4,X2,X1) [fool elimination 51]
57. ! [X5 : 'list()'(X0),X4 : X0,X3 : 'nat()',X2 : 'list()'(X0),X1 : 'nat()',X0 : $tType] : take(X0,X1,X2) = $match(X1,zero,'Nil'(X0),s(X3),$match(X2,'Nil'(X0),'Nil'(X0),'Cons'(X0,X4,X5),'Cons'(X0,X4,take(X0,X3,X5)))) [closure 10]
58. ! [X0 : $tType,X5 : 'list()'(X0),X3 : 'nat()',X4 : X0,X2 : 'list()'(X0),X1 : 'nat()'] : (zero = X1 => 'Nil'(X0) = mG9(X0,X5,X3,X4,X2,X1)) [fool $match elimination 57]
60. ! [X0 : $tType,X5 : 'list()'(X0),X3 : 'nat()',X4 : X0,X2 : 'list()'(X0)] : ('Cons'(X0,X4,X5) = X2 => 'Cons'(X0,X4,take(X0,X3,X5)) = mG10(X0,X5,X3,X4,X2)) [fool $match elimination 57]
61. ! [X0 : $tType,X5 : 'list()'(X0),X3 : 'nat()',X4 : X0,X2 : 'list()'(X0),X1 : 'nat()'] : (s(X3) = X1 => mG9(X0,X5,X3,X4,X2,X1) = mG10(X0,X5,X3,X4,X2)) [fool $match elimination 57]
62. ! [X5 : 'list()'(X0),X4 : X0,X3 : 'nat()',X2 : 'list()'(X0),X1 : 'nat()',X0 : $tType] : take(X0,X1,X2) = mG9(X0,X5,X3,X4,X2,X1) [fool elimination 57]
80. ! [X0 : $tType,X1 : 'list()'(X0),X2 : 'nat()',X3 : X0,X4 : 'list()'(X0),X5 : 'nat()'] : (s(X2) = X5 => mG9(X0,X1,X2,X3,X4,X5) = mG10(X0,X1,X2,X3,X4)) [rectify 61]
81. ! [X0 : $tType,X1 : 'list()'(X0),X2 : 'nat()',X3 : X0,X4 : 'list()'(X0)] : ('Cons'(X0,X3,X1) = X4 => mG10(X0,X1,X2,X3,X4) = 'Cons'(X0,X3,take(X0,X2,X1))) [rectify 60]
83. ! [X0 : $tType,X1 : 'list()'(X0),X2 : 'nat()',X3 : X0,X4 : 'list()'(X0),X5 : 'nat()'] : (zero = X5 => 'Nil'(X0) = mG9(X0,X1,X2,X3,X4,X5)) [rectify 58]
84. ! [X0 : $tType,X1 : 'list()'(X0),X2 : 'nat()',X3 : X0,X4 : 'list()'(X0),X5 : 'nat()'] : (s(X2) = X5 => mG7(X0,X1,X2,X3,X4,X5) = mG8(X0,X1,X2,X3,X4)) [rectify 55]
85. ! [X0 : $tType,X1 : 'list()'(X0),X2 : 'nat()',X3 : X0,X4 : 'list()'(X0)] : ('Cons'(X0,X3,X1) = X4 => mG8(X0,X1,X2,X3,X4) = drop(X0,X2,X1)) [rectify 54]
87. ! [X0 : $tType,X1 : 'list()'(X0),X2 : 'nat()',X3 : X0,X4 : 'list()'(X0),X5 : 'nat()'] : (zero = X5 => mG7(X0,X1,X2,X3,X4,X5) = X4) [rectify 52]
95. ! [X0 : $tType,X1 : 'list()'(X0),X2 : 'list()'(X0),X3 : X0] : ('Cons'(X0,X3,X2) = X1 => merge(X0,mergesort(X0,take(X0,div2(len(X0,X1)),X1)),mergesort(X0,drop(X0,div2(len(X0,X1)),X1))) = mG3(X0,X1,X2,X3)) [rectify 41]
96. ! [X0 : $tType,X1 : 'list()'(X0),X2 : 'list()'(X0),X3 : X0] : ('Nil'(X0) = X1 => 'Nil'(X0) = mG3(X0,X1,X2,X3)) [rectify 40]
97. ! [X0 : $tType,X1 : 'list()'(X0),X2 : X0,X3 : 'list()'(X0)] : ('Cons'(X0,X2,X1) = X3 => s(len(X0,X1)) = mG2(X0,X1,X2,X3)) [rectify 37]
103. ~! [X0 : $tType,X1 : X0,X2 : 'list()'(X0)] : filter_mset(X0,X1,X2) = filter_mset(X0,X1,mergesort(X0,X2)) [flattening 17]
107. ! [X0 : 'list()'(X3),X1 : X3,X2 : 'list()'(X3),X3 : $tType] : len(X3,X2) = mG2(X3,X0,X1,X2) [rectify 38]
108. ! [X0 : 'list()'(X3),X1 : X3,X2 : 'list()'(X3),X3 : $tType] : mergesort(X3,X2) = mG3(X3,X2,X0,X1) [rectify 42]
110. ! [X0 : 'list()'(X5),X1 : X5,X2 : 'nat()',X3 : 'list()'(X5),X4 : 'nat()',X5 : $tType] : drop(X5,X4,X3) = mG7(X5,X0,X2,X1,X3,X4) [rectify 56]
111. ! [X0 : 'list()'(X5),X1 : X5,X2 : 'nat()',X3 : 'list()'(X5),X4 : 'nat()',X5 : $tType] : take(X5,X4,X3) = mG9(X5,X0,X2,X1,X3,X4) [rectify 62]
119. ! [X0 : $tType] : ! [X1 : 'list()'(X0),X2 : X0,X3 : 'list()'(X0)] : append(X0,filter_mset(X0,X2,X3),filter_mset(X0,X2,X1)) = filter_mset(X0,X2,merge(X0,X3,X1)) [rectify 14]
120. ! [X0 : $tType,X1 : 'list()'(X0),X2 : X0,X3 : 'list()'(X0)] : append(X0,filter_mset(X0,X2,X3),filter_mset(X0,X2,X1)) = filter_mset(X0,X2,merge(X0,X3,X1)) [flattening 119]
121. ! [X0 : $tType] : ! [X1 : 'nat()',X2 : X0,X3 : 'list()'(X0)] : filter_mset(X0,X2,X3) = append(X0,filter_mset(X0,X2,take(X0,X1,X3)),filter_mset(X0,X2,drop(X0,X1,X3))) [rectify 15]
122. ! [X0 : $tType,X1 : 'nat()',X2 : X0,X3 : 'list()'(X0)] : filter_mset(X0,X2,X3) = append(X0,filter_mset(X0,X2,take(X0,X1,X3)),filter_mset(X0,X2,drop(X0,X1,X3))) [flattening 121]
131. ! [X0 : $tType,X1 : 'list()'(X0),X2 : 'nat()',X3 : X0,X4 : 'list()'(X0),X5 : 'nat()'] : (mG9(X0,X1,X2,X3,X4,X5) = mG10(X0,X1,X2,X3,X4) | s(X2) != X5) [ennf transformation 80]
132. ! [X0 : $tType,X1 : 'list()'(X0),X2 : 'nat()',X3 : X0,X4 : 'list()'(X0)] : (mG10(X0,X1,X2,X3,X4) = 'Cons'(X0,X3,take(X0,X2,X1)) | 'Cons'(X0,X3,X1) != X4) [ennf transformation 81]
134. ! [X0 : $tType,X1 : 'list()'(X0),X2 : 'nat()',X3 : X0,X4 : 'list()'(X0),X5 : 'nat()'] : ('Nil'(X0) = mG9(X0,X1,X2,X3,X4,X5) | zero != X5) [ennf transformation 83]
135. ! [X0 : $tType,X1 : 'list()'(X0),X2 : 'nat()',X3 : X0,X4 : 'list()'(X0),X5 : 'nat()'] : (mG7(X0,X1,X2,X3,X4,X5) = mG8(X0,X1,X2,X3,X4) | s(X2) != X5) [ennf transformation 84]
136. ! [X0 : $tType,X1 : 'list()'(X0),X2 : 'nat()',X3 : X0,X4 : 'list()'(X0)] : (mG8(X0,X1,X2,X3,X4) = drop(X0,X2,X1) | 'Cons'(X0,X3,X1) != X4) [ennf transformation 85]
138. ! [X0 : $tType,X1 : 'list()'(X0),X2 : 'nat()',X3 : X0,X4 : 'list()'(X0),X5 : 'nat()'] : (mG7(X0,X1,X2,X3,X4,X5) = X4 | zero != X5) [ennf transformation 87]
145. ! [X0 : $tType,X1 : 'list()'(X0),X2 : 'list()'(X0),X3 : X0] : (merge(X0,mergesort(X0,take(X0,div2(len(X0,X1)),X1)),mergesort(X0,drop(X0,div2(len(X0,X1)),X1))) = mG3(X0,X1,X2,X3) | 'Cons'(X0,X3,X2) != X1) [ennf transformation 95]
146. ! [X0 : $tType,X1 : 'list()'(X0),X2 : 'list()'(X0),X3 : X0] : ('Nil'(X0) = mG3(X0,X1,X2,X3) | 'Nil'(X0) != X1) [ennf transformation 96]
147. ! [X0 : $tType,X1 : 'list()'(X0),X2 : X0,X3 : 'list()'(X0)] : (s(len(X0,X1)) = mG2(X0,X1,X2,X3) | 'Cons'(X0,X2,X1) != X3) [ennf transformation 97]
153. ? [X0 : $tType,X1 : X0,X2 : 'list()'(X0)] : filter_mset(X0,X1,X2) != filter_mset(X0,X1,mergesort(X0,X2)) [ennf transformation 103]
158. ? [X0 : $tType,X1 : X0,X2 : 'list()'(X0)] : filter_mset(X0,X1,X2) != filter_mset(X0,X1,mergesort(X0,X2)) => filter_mset(sK14,sK15,sK16) != filter_mset(sK14,sK15,mergesort(sK14,sK16)) [choice axiom]
159. filter_mset(sK14,sK15,sK16) != filter_mset(sK14,sK15,mergesort(sK14,sK16)) [skolemisation 153,158]
167. mG9(X0,X1,X2,X3,X4,X5) = mG10(X0,X1,X2,X3,X4) | s(X2) != X5 [cnf transformation 131]
168. mG10(X0,X1,X2,X3,X4) = 'Cons'(X0,X3,take(X0,X2,X1)) | 'Cons'(X0,X3,X1) != X4 [cnf transformation 132]
170. 'Nil'(X0) = mG9(X0,X1,X2,X3,X4,X5) | zero != X5 [cnf transformation 134]
171. mG7(X0,X1,X2,X3,X4,X5) = mG8(X0,X1,X2,X3,X4) | s(X2) != X5 [cnf transformation 135]
172. mG8(X0,X1,X2,X3,X4) = drop(X0,X2,X1) | 'Cons'(X0,X3,X1) != X4 [cnf transformation 136]
174. mG7(X0,X1,X2,X3,X4,X5) = X4 | zero != X5 [cnf transformation 138]
181. merge(X0,mergesort(X0,take(X0,div2(len(X0,X1)),X1)),mergesort(X0,drop(X0,div2(len(X0,X1)),X1))) = mG3(X0,X1,X2,X3) | 'Cons'(X0,X3,X2) != X1 [cnf transformation 145]
182. 'Nil'(X0) = mG3(X0,X1,X2,X3) | 'Nil'(X0) != X1 [cnf transformation 146]
183. s(len(X0,X1)) = mG2(X0,X1,X2,X3) | 'Cons'(X0,X2,X1) != X3 [cnf transformation 147]
189. filter_mset(sK14,sK15,sK16) != filter_mset(sK14,sK15,mergesort(sK14,sK16)) [cnf transformation 159]
193. len(X3,X2) = mG2(X3,X0,X1,X2) [cnf transformation 107]
194. mergesort(X3,X2) = mG3(X3,X2,X0,X1) [cnf transformation 108]
196. drop(X5,X4,X3) = mG7(X5,X0,X2,X1,X3,X4) [cnf transformation 110]
197. take(X5,X4,X3) = mG9(X5,X0,X2,X1,X3,X4) [cnf transformation 111]
203. append(X0,filter_mset(X0,X2,X3),filter_mset(X0,X2,X1)) = filter_mset(X0,X2,merge(X0,X3,X1)) [cnf transformation 120]
204. filter_mset(X0,X2,X3) = append(X0,filter_mset(X0,X2,take(X0,X1,X3)),filter_mset(X0,X2,drop(X0,X1,X3))) [cnf transformation 122]
210. mG10(X0,X1,X2,X3,X4) = take(X0,X5,X4) | s(X2) != X5 [definition unfolding 167,197]
211. 'Nil'(X0) = take(X0,X5,X4) | zero != X5 [definition unfolding 170,197]
212. mG8(X0,X1,X2,X3,X4) = drop(X0,X5,X4) | s(X2) != X5 [definition unfolding 171,196]
213. drop(X0,X5,X4) = X4 | zero != X5 [definition unfolding 174,196]
216. merge(X0,mergesort(X0,take(X0,div2(len(X0,X1)),X1)),mergesort(X0,drop(X0,div2(len(X0,X1)),X1))) = mergesort(X0,X1) | 'Cons'(X0,X3,X2) != X1 [definition unfolding 181,194]
217. 'Nil'(X0) = mergesort(X0,X1) | 'Nil'(X0) != X1 [definition unfolding 182,194]
218. len(X0,X3) = s(len(X0,X1)) | 'Cons'(X0,X2,X1) != X3 [definition unfolding 183,193]
227. mG10(X0,X1,X2,X3,X4) = take(X0,s(X2),X4) [equality resolution 210]
228. 'Cons'(X0,X3,take(X0,X2,X1)) = mG10(X0,X1,X2,X3,'Cons'(X0,X3,X1)) [equality resolution 168]
230. 'Nil'(X0) = take(X0,zero,X4) [equality resolution 211]
231. mG8(X0,X1,X2,X3,X4) = drop(X0,s(X2),X4) [equality resolution 212]
232. drop(X0,X2,X1) = mG8(X0,X1,X2,X3,'Cons'(X0,X3,X1)) [equality resolution 172]
234. drop(X0,zero,X4) = X4 [equality resolution 213]
239. merge(X0,mergesort(X0,take(X0,div2(len(X0,'Cons'(X0,X3,X2))),'Cons'(X0,X3,X2))),mergesort(X0,drop(X0,div2(len(X0,'Cons'(X0,X3,X2))),'Cons'(X0,X3,X2)))) = mergesort(X0,'Cons'(X0,X3,X2)) [equality resolution 216]
240. 'Nil'(X0) = mergesort(X0,'Nil'(X0)) [equality resolution 217]
241. s(len(X0,X1)) = len(X0,'Cons'(X0,X2,X1)) [equality resolution 218]
248. 'Cons'(X0,X3,take(X0,X2,X1)) = take(X0,s(X2),'Cons'(X0,X3,X1)) [forward demodulation 228,227]
250. drop(X0,X2,X1) = drop(X0,s(X2),'Cons'(X0,X3,X1)) [forward demodulation 232,231]
252. mergesort(X0,'Cons'(X0,X3,X2)) = merge(X0,mergesort(X0,take(X0,div2(s(len(X0,X2))),'Cons'(X0,X3,X2))),mergesort(X0,drop(X0,div2(s(len(X0,X2))),'Cons'(X0,X3,X2)))) [backward demodulation 239,241]
336. ! [X2 : 'list()'(sK14),X1 : sK14] : (((filter_mset(sK14,sK15,drop(sK14,div2(len(sK14,'Cons'(sK14,X1,X2))),'Cons'(sK14,X1,X2))) = filter_mset(sK14,sK15,mergesort(sK14,drop(sK14,div2(len(sK14,'Cons'(sK14,X1,X2))),'Cons'(sK14,X1,X2)))) & filter_mset(sK14,sK15,take(sK14,div2(len(sK14,'Cons'(sK14,X1,X2))),'Cons'(sK14,X1,X2))) = filter_mset(sK14,sK15,mergesort(sK14,take(sK14,div2(len(sK14,'Cons'(sK14,X1,X2))),'Cons'(sK14,X1,X2))))) => filter_mset(sK14,sK15,'Cons'(sK14,X1,X2)) = filter_mset(sK14,sK15,mergesort(sK14,'Cons'(sK14,X1,X2)))) & filter_mset(sK14,sK15,'Nil'(sK14)) = filter_mset(sK14,sK15,mergesort(sK14,'Nil'(sK14)))) => ! [X4 : 'list()'(sK14)] : filter_mset(sK14,sK15,X4) = filter_mset(sK14,sK15,mergesort(sK14,X4)) [structural induction hypothesis (recursion)]
337. ! [X4 : 'list()'(sK14)] : filter_mset(sK14,sK15,X4) = filter_mset(sK14,sK15,mergesort(sK14,X4)) | ? [X2 : 'list()'(sK14),X1 : sK14] : ((filter_mset(sK14,sK15,'Cons'(sK14,X1,X2)) != filter_mset(sK14,sK15,mergesort(sK14,'Cons'(sK14,X1,X2))) & (filter_mset(sK14,sK15,drop(sK14,div2(len(sK14,'Cons'(sK14,X1,X2))),'Cons'(sK14,X1,X2))) = filter_mset(sK14,sK15,mergesort(sK14,drop(sK14,div2(len(sK14,'Cons'(sK14,X1,X2))),'Cons'(sK14,X1,X2)))) & filter_mset(sK14,sK15,take(sK14,div2(len(sK14,'Cons'(sK14,X1,X2))),'Cons'(sK14,X1,X2))) = filter_mset(sK14,sK15,mergesort(sK14,take(sK14,div2(len(sK14,'Cons'(sK14,X1,X2))),'Cons'(sK14,X1,X2)))))) | filter_mset(sK14,sK15,'Nil'(sK14)) != filter_mset(sK14,sK15,mergesort(sK14,'Nil'(sK14)))) [ennf transformation 336]
338. filter_mset(sK14,sK15,'Nil'(sK14)) != filter_mset(sK14,sK15,mergesort(sK14,'Nil'(sK14))) | filter_mset(sK14,sK15,take(sK14,div2(len(sK14,'Cons'(sK14,sK21,sK20))),'Cons'(sK14,sK21,sK20))) = filter_mset(sK14,sK15,mergesort(sK14,take(sK14,div2(len(sK14,'Cons'(sK14,sK21,sK20))),'Cons'(sK14,sK21,sK20)))) | filter_mset(sK14,sK15,X4) = filter_mset(sK14,sK15,mergesort(sK14,X4)) [cnf transformation 337]
339. filter_mset(sK14,sK15,'Nil'(sK14)) != filter_mset(sK14,sK15,mergesort(sK14,'Nil'(sK14))) | filter_mset(sK14,sK15,drop(sK14,div2(len(sK14,'Cons'(sK14,sK21,sK20))),'Cons'(sK14,sK21,sK20))) = filter_mset(sK14,sK15,mergesort(sK14,drop(sK14,div2(len(sK14,'Cons'(sK14,sK21,sK20))),'Cons'(sK14,sK21,sK20)))) | filter_mset(sK14,sK15,X4) = filter_mset(sK14,sK15,mergesort(sK14,X4)) [cnf transformation 337]
340. filter_mset(sK14,sK15,'Nil'(sK14)) != filter_mset(sK14,sK15,mergesort(sK14,'Nil'(sK14))) | filter_mset(sK14,sK15,'Cons'(sK14,sK21,sK20)) != filter_mset(sK14,sK15,mergesort(sK14,'Cons'(sK14,sK21,sK20))) | filter_mset(sK14,sK15,X4) = filter_mset(sK14,sK15,mergesort(sK14,X4)) [cnf transformation 337]
347. filter_mset(sK14,sK15,'Nil'(sK14)) != filter_mset(sK14,sK15,mergesort(sK14,'Nil'(sK14))) | filter_mset(sK14,sK15,'Cons'(sK14,sK21,sK20)) != filter_mset(sK14,sK15,mergesort(sK14,'Cons'(sK14,sK21,sK20))) [induction hyperresolution 189,340]
348. filter_mset(sK14,sK15,'Nil'(sK14)) != filter_mset(sK14,sK15,mergesort(sK14,'Nil'(sK14))) | filter_mset(sK14,sK15,drop(sK14,div2(len(sK14,'Cons'(sK14,sK21,sK20))),'Cons'(sK14,sK21,sK20))) = filter_mset(sK14,sK15,mergesort(sK14,drop(sK14,div2(len(sK14,'Cons'(sK14,sK21,sK20))),'Cons'(sK14,sK21,sK20)))) [induction hyperresolution 189,339]
349. filter_mset(sK14,sK15,'Nil'(sK14)) != filter_mset(sK14,sK15,mergesort(sK14,'Nil'(sK14))) | filter_mset(sK14,sK15,take(sK14,div2(len(sK14,'Cons'(sK14,sK21,sK20))),'Cons'(sK14,sK21,sK20))) = filter_mset(sK14,sK15,mergesort(sK14,take(sK14,div2(len(sK14,'Cons'(sK14,sK21,sK20))),'Cons'(sK14,sK21,sK20)))) [induction hyperresolution 189,338]
356. filter_mset(sK14,sK15,'Nil'(sK14)) != filter_mset(sK14,sK15,'Nil'(sK14)) | filter_mset(sK14,sK15,take(sK14,div2(len(sK14,'Cons'(sK14,sK21,sK20))),'Cons'(sK14,sK21,sK20))) = filter_mset(sK14,sK15,mergesort(sK14,take(sK14,div2(len(sK14,'Cons'(sK14,sK21,sK20))),'Cons'(sK14,sK21,sK20)))) [forward demodulation 349,240]
357. filter_mset(sK14,sK15,take(sK14,div2(len(sK14,'Cons'(sK14,sK21,sK20))),'Cons'(sK14,sK21,sK20))) = filter_mset(sK14,sK15,mergesort(sK14,take(sK14,div2(len(sK14,'Cons'(sK14,sK21,sK20))),'Cons'(sK14,sK21,sK20)))) [trivial inequality removal 356]
358. filter_mset(sK14,sK15,take(sK14,div2(s(len(sK14,sK20))),'Cons'(sK14,sK21,sK20))) = filter_mset(sK14,sK15,mergesort(sK14,take(sK14,div2(s(len(sK14,sK20))),'Cons'(sK14,sK21,sK20)))) [forward demodulation 357,241]
359. filter_mset(sK14,sK15,'Nil'(sK14)) != filter_mset(sK14,sK15,'Nil'(sK14)) | filter_mset(sK14,sK15,drop(sK14,div2(len(sK14,'Cons'(sK14,sK21,sK20))),'Cons'(sK14,sK21,sK20))) = filter_mset(sK14,sK15,mergesort(sK14,drop(sK14,div2(len(sK14,'Cons'(sK14,sK21,sK20))),'Cons'(sK14,sK21,sK20)))) [forward demodulation 348,240]
360. filter_mset(sK14,sK15,drop(sK14,div2(len(sK14,'Cons'(sK14,sK21,sK20))),'Cons'(sK14,sK21,sK20))) = filter_mset(sK14,sK15,mergesort(sK14,drop(sK14,div2(len(sK14,'Cons'(sK14,sK21,sK20))),'Cons'(sK14,sK21,sK20)))) [trivial inequality removal 359]
361. filter_mset(sK14,sK15,drop(sK14,div2(s(len(sK14,sK20))),'Cons'(sK14,sK21,sK20))) = filter_mset(sK14,sK15,mergesort(sK14,drop(sK14,div2(s(len(sK14,sK20))),'Cons'(sK14,sK21,sK20)))) [forward demodulation 360,241]
362. filter_mset(sK14,sK15,'Nil'(sK14)) != filter_mset(sK14,sK15,'Nil'(sK14)) | filter_mset(sK14,sK15,'Cons'(sK14,sK21,sK20)) != filter_mset(sK14,sK15,mergesort(sK14,'Cons'(sK14,sK21,sK20))) [forward demodulation 347,240]
363. filter_mset(sK14,sK15,'Cons'(sK14,sK21,sK20)) != filter_mset(sK14,sK15,mergesort(sK14,'Cons'(sK14,sK21,sK20))) [trivial inequality removal 362]
500. filter_mset(X6,X10,'Cons'(X6,X8,X9)) = append(X6,filter_mset(X6,X10,'Cons'(X6,X8,take(X6,X7,X9))),filter_mset(X6,X10,drop(X6,s(X7),'Cons'(X6,X8,X9)))) [superposition 204,248]
508. filter_mset(X6,X10,'Cons'(X6,X8,X9)) = append(X6,filter_mset(X6,X10,'Cons'(X6,X8,take(X6,X7,X9))),filter_mset(X6,X10,drop(X6,X7,X9))) [forward demodulation 500,250]
542. append(X0,filter_mset(X0,X3,mergesort(X0,take(X0,div2(s(len(X0,X1))),'Cons'(X0,X2,X1)))),filter_mset(X0,X3,mergesort(X0,drop(X0,div2(s(len(X0,X1))),'Cons'(X0,X2,X1))))) = filter_mset(X0,X3,mergesort(X0,'Cons'(X0,X2,X1))) [superposition 203,252]
1100. filter_mset(X0,X2,'Cons'(X0,X3,X1)) = append(X0,filter_mset(X0,X2,'Cons'(X0,X3,'Nil'(X0))),filter_mset(X0,X2,drop(X0,zero,X1))) [superposition 508,230]
1116. filter_mset(X0,X2,'Cons'(X0,X3,X1)) = append(X0,filter_mset(X0,X2,'Cons'(X0,X3,'Nil'(X0))),filter_mset(X0,X2,X1)) [forward demodulation 1100,234]
1121. filter_mset(sK14,sK15,mergesort(sK14,'Cons'(sK14,sK21,sK20))) != append(sK14,filter_mset(sK14,sK15,'Cons'(sK14,sK21,'Nil'(sK14))),filter_mset(sK14,sK15,sK20)) [backward demodulation 363,1116]
1654. filter_mset(sK14,sK15,mergesort(sK14,'Cons'(sK14,sK21,sK20))) = append(sK14,filter_mset(sK14,sK15,take(sK14,div2(s(len(sK14,sK20))),'Cons'(sK14,sK21,sK20))),filter_mset(sK14,sK15,mergesort(sK14,drop(sK14,div2(s(len(sK14,sK20))),'Cons'(sK14,sK21,sK20))))) [superposition 542,358]
1665. filter_mset(sK14,sK15,mergesort(sK14,'Cons'(sK14,sK21,sK20))) = append(sK14,filter_mset(sK14,sK15,take(sK14,div2(s(len(sK14,sK20))),'Cons'(sK14,sK21,sK20))),filter_mset(sK14,sK15,drop(sK14,div2(s(len(sK14,sK20))),'Cons'(sK14,sK21,sK20)))) [forward demodulation 1654,361]
1666. filter_mset(sK14,sK15,'Cons'(sK14,sK21,sK20)) = filter_mset(sK14,sK15,mergesort(sK14,'Cons'(sK14,sK21,sK20))) [forward demodulation 1665,204]
1667. filter_mset(sK14,sK15,mergesort(sK14,'Cons'(sK14,sK21,sK20))) = append(sK14,filter_mset(sK14,sK15,'Cons'(sK14,sK21,'Nil'(sK14))),filter_mset(sK14,sK15,sK20)) [forward demodulation 1666,1116]
1668. $false [subsumption resolution 1667,1121]
% SZS output end Proof for conjecture
% ------------------------------
% Version: Vampire 4.7 (commit )
% Linked with Z3 4.9.1.0  NOTFOUND
% Termination reason: Refutation

% Memory used [KB]: 6652
% Time elapsed: 0.049 s
% ------------------------------
% ------------------------------
