% Refutation found. Thanks to Tanya!
% SZS status Unsatisfiable for conjecture
% SZS output start Proof for conjecture
7. (sorted(X0,X1) = $match(X1,'Nil'(X0),$true,'Cons'(X0,X2,X3),list_ge_elem(X0,X3,X2) & sorted(X0,X3))) [input]
8. len(X0,X1) = $match(X1,'Nil'(X0),zero,'Cons'(X0,X2,X3),s(len(X0,X3))) [input]
9. div2(X0) = $match(X0,zero,zero,s(X1),$match(X1,zero,zero,s(X2),s(div2(X2)))) [input]
12. drop(X0,X1,X2) = $match(X1,zero,X2,s(X3),$match(X2,'Nil'(X0),'Nil'(X0),'Cons'(X0,X4,X5),drop(X0,X3,X5))) [input]
13. mergesort(X0,X1) = $match(X1,'Nil'(X0),'Nil'(X0),'Cons'(X0,X2,X3),$ite('Nil'(X0) = X3, X1,merge(X0,mergesort(X0,take(X0,div2(len(X0,X1)),X1)),mergesort(X0,drop(X0,div2(len(X0,X1)),X1))))) [input]
14. ! [X0 : $tType] : ! [X2 : 'list()'(X0),X1 : 'list()'(X0)] : ((sorted(X0,X1) & sorted(X0,X2)) => sorted(X0,merge(X0,X1,X2))) [input]
15. ! [X0 : $tType] : ! [X1 : 'list()'(X0)] : sorted(X0,mergesort(X0,X1)) [input]
16. ~! [X0 : $tType] : ! [X1 : 'list()'(X0)] : sorted(X0,mergesort(X0,X1)) [negated conjecture 15]
26. ! [X3 : 'list()'(X0),X2 : X0,X1 : 'list()'(X0),X0 : $tType] : (sorted(X0,X1) = $match(X1,'Nil'(X0),$true,'Cons'(X0,X2,X3),list_ge_elem(X0,X3,X2) & sorted(X0,X3))) [closure 7]
27. ! [X0 : $tType,X2 : X0,X3 : 'list()'(X0),X1 : 'list()'(X0)] : ('Nil'(X0) = X1 => (mG0(X0,X2,X3,X1) <=> $true)) [fool $match elimination 26]
29. ! [X3 : 'list()'(X0),X2 : X0,X1 : 'list()'(X0),X0 : $tType] : (sorted(X0,X1) <=> mG0(X0,X2,X3,X1)) [fool elimination 26]
36. ! [X2 : 'nat()',X1 : 'nat()',X0 : 'nat()'] : div2(X0) = $match(X0,zero,zero,s(X1),$match(X1,zero,zero,s(X2),s(div2(X2)))) [closure 9]
38. ! [X2 : 'nat()',X1 : 'nat()'] : (zero = X1 => zero = mG3(X2,X1)) [fool $match elimination 36]
40. ! [X2 : 'nat()',X1 : 'nat()',X0 : 'nat()'] : (s(X1) = X0 => mG2(X2,X1,X0) = mG3(X2,X1)) [fool $match elimination 36]
41. ! [X2 : 'nat()',X1 : 'nat()',X0 : 'nat()'] : div2(X0) = mG2(X2,X1,X0) [fool elimination 36]
42. ! [X3 : 'list()'(X0),X2 : X0,X1 : 'list()'(X0),X0 : $tType] : len(X0,X1) = $match(X1,'Nil'(X0),zero,'Cons'(X0,X2,X3),s(len(X0,X3))) [closure 8]
43. ! [X0 : $tType,X3 : 'list()'(X0),X2 : X0,X1 : 'list()'(X0)] : ('Nil'(X0) = X1 => zero = mG4(X0,X3,X2,X1)) [fool $match elimination 42]
44. ! [X0 : $tType,X3 : 'list()'(X0),X2 : X0,X1 : 'list()'(X0)] : ('Cons'(X0,X2,X3) = X1 => s(len(X0,X3)) = mG4(X0,X3,X2,X1)) [fool $match elimination 42]
45. ! [X3 : 'list()'(X0),X2 : X0,X1 : 'list()'(X0),X0 : $tType] : len(X0,X1) = mG4(X0,X3,X2,X1) [fool elimination 42]
46. ! [X3 : 'list()'(X0),X2 : X0,X1 : 'list()'(X0),X0 : $tType] : mergesort(X0,X1) = $match(X1,'Nil'(X0),'Nil'(X0),'Cons'(X0,X2,X3),$ite('Nil'(X0) = X3, X1,merge(X0,mergesort(X0,take(X0,div2(len(X0,X1)),X1)),mergesort(X0,drop(X0,div2(len(X0,X1)),X1))))) [closure 13]
47. ! [X0 : $tType,X3 : 'list()'(X0),X1 : 'list()'(X0),X2 : X0] : ('Nil'(X0) = X1 => 'Nil'(X0) = mG5(X0,X3,X1,X2)) [fool $match elimination 46]
49. ! [X0 : $tType,X3 : 'list()'(X0),X1 : 'list()'(X0)] : (~'Nil'(X0) = X3 => merge(X0,mergesort(X0,take(X0,div2(len(X0,X1)),X1)),mergesort(X0,drop(X0,div2(len(X0,X1)),X1))) = iG6(X0,X3,X1)) [fool $ite elimination 46]
50. ! [X0 : $tType,X3 : 'list()'(X0),X1 : 'list()'(X0),X2 : X0] : ('Cons'(X0,X2,X3) = X1 => mG5(X0,X3,X1,X2) = iG6(X0,X3,X1)) [fool $match elimination 46]
51. ! [X3 : 'list()'(X0),X2 : X0,X1 : 'list()'(X0),X0 : $tType] : mergesort(X0,X1) = mG5(X0,X3,X1,X2) [fool elimination 46]
52. ! [X5 : 'list()'(X0),X4 : X0,X3 : 'nat()',X2 : 'list()'(X0),X1 : 'nat()',X0 : $tType] : drop(X0,X1,X2) = $match(X1,zero,X2,s(X3),$match(X2,'Nil'(X0),'Nil'(X0),'Cons'(X0,X4,X5),drop(X0,X3,X5))) [closure 12]
53. ! [X0 : $tType,X5 : 'list()'(X0),X3 : 'nat()',X4 : X0,X2 : 'list()'(X0),X1 : 'nat()'] : (zero = X1 => mG7(X0,X5,X3,X4,X2,X1) = X2) [fool $match elimination 52]
57. ! [X5 : 'list()'(X0),X4 : X0,X3 : 'nat()',X2 : 'list()'(X0),X1 : 'nat()',X0 : $tType] : drop(X0,X1,X2) = mG7(X0,X5,X3,X4,X2,X1) [fool elimination 52]
86. ! [X0 : $tType,X1 : 'list()'(X0),X2 : 'nat()',X3 : X0,X4 : 'list()'(X0),X5 : 'nat()'] : (zero = X5 => mG7(X0,X1,X2,X3,X4,X5) = X4) [rectify 53]
87. ! [X0 : $tType,X1 : 'list()'(X0),X2 : 'list()'(X0),X3 : X0] : ('Cons'(X0,X3,X1) = X2 => mG5(X0,X1,X2,X3) = iG6(X0,X1,X2)) [rectify 50]
88. ! [X0 : $tType,X1 : 'list()'(X0),X2 : 'list()'(X0)] : (~'Nil'(X0) = X1 => iG6(X0,X1,X2) = merge(X0,mergesort(X0,take(X0,div2(len(X0,X2)),X2)),mergesort(X0,drop(X0,div2(len(X0,X2)),X2)))) [rectify 49]
89. ! [X0 : $tType,X1 : 'list()'(X0),X2 : 'list()'(X0)] : ('Nil'(X0) != X1 => iG6(X0,X1,X2) = merge(X0,mergesort(X0,take(X0,div2(len(X0,X2)),X2)),mergesort(X0,drop(X0,div2(len(X0,X2)),X2)))) [flattening 88]
91. ! [X0 : $tType,X1 : 'list()'(X0),X2 : 'list()'(X0),X3 : X0] : ('Nil'(X0) = X2 => 'Nil'(X0) = mG5(X0,X1,X2,X3)) [rectify 47]
92. ! [X0 : $tType,X1 : 'list()'(X0),X2 : X0,X3 : 'list()'(X0)] : ('Cons'(X0,X2,X1) = X3 => s(len(X0,X1)) = mG4(X0,X1,X2,X3)) [rectify 44]
93. ! [X0 : $tType,X1 : 'list()'(X0),X2 : X0,X3 : 'list()'(X0)] : ('Nil'(X0) = X3 => zero = mG4(X0,X1,X2,X3)) [rectify 43]
94. ! [X0 : 'nat()',X1 : 'nat()',X2 : 'nat()'] : (s(X1) = X2 => mG2(X0,X1,X2) = mG3(X0,X1)) [rectify 40]
96. ! [X0 : 'nat()',X1 : 'nat()'] : (zero = X1 => zero = mG3(X0,X1)) [rectify 38]
103. ! [X0 : $tType,X1 : X0,X2 : 'list()'(X0),X3 : 'list()'(X0)] : ('Nil'(X0) = X3 => (mG0(X0,X1,X2,X3) <=> $true)) [rectify 27]
104. ! [X0 : $tType,X1 : X0,X2 : 'list()'(X0),X3 : 'list()'(X0)] : ('Nil'(X0) = X3 => mG0(X0,X1,X2,X3)) [true and false elimination 103]
105. ~! [X0 : $tType,X1 : 'list()'(X0)] : sorted(X0,mergesort(X0,X1)) [flattening 16]
106. ! [X0 : 'list()'(X3),X1 : X3,X2 : 'list()'(X3),X3 : $tType] : (sorted(X3,X2) <=> mG0(X3,X1,X0,X2)) [rectify 29]
110. ! [X0 : 'nat()',X1 : 'nat()',X2 : 'nat()'] : div2(X2) = mG2(X0,X1,X2) [rectify 41]
111. ! [X0 : 'list()'(X3),X1 : X3,X2 : 'list()'(X3),X3 : $tType] : len(X3,X2) = mG4(X3,X0,X1,X2) [rectify 45]
112. ! [X0 : 'list()'(X3),X1 : X3,X2 : 'list()'(X3),X3 : $tType] : mergesort(X3,X2) = mG5(X3,X0,X2,X1) [rectify 51]
113. ! [X0 : 'list()'(X5),X1 : X5,X2 : 'nat()',X3 : 'list()'(X5),X4 : 'nat()',X5 : $tType] : drop(X5,X4,X3) = mG7(X5,X0,X2,X1,X3,X4) [rectify 57]
119. ! [X0 : $tType] : ! [X1 : 'list()'(X0),X2 : 'list()'(X0)] : ((sorted(X0,X2) & sorted(X0,X1)) => sorted(X0,merge(X0,X2,X1))) [rectify 14]
120. ! [X0 : $tType,X1 : 'list()'(X0),X2 : 'list()'(X0)] : ((sorted(X0,X2) & sorted(X0,X1)) => sorted(X0,merge(X0,X2,X1))) [flattening 119]
138. ! [X0 : $tType,X1 : 'list()'(X0),X2 : 'nat()',X3 : X0,X4 : 'list()'(X0),X5 : 'nat()'] : (mG7(X0,X1,X2,X3,X4,X5) = X4 | zero != X5) [ennf transformation 86]
139. ! [X0 : $tType,X1 : 'list()'(X0),X2 : 'list()'(X0),X3 : X0] : (mG5(X0,X1,X2,X3) = iG6(X0,X1,X2) | 'Cons'(X0,X3,X1) != X2) [ennf transformation 87]
140. ! [X0 : $tType,X1 : 'list()'(X0),X2 : 'list()'(X0)] : (iG6(X0,X1,X2) = merge(X0,mergesort(X0,take(X0,div2(len(X0,X2)),X2)),mergesort(X0,drop(X0,div2(len(X0,X2)),X2))) | 'Nil'(X0) = X1) [ennf transformation 89]
142. ! [X0 : $tType,X1 : 'list()'(X0),X2 : 'list()'(X0),X3 : X0] : ('Nil'(X0) = mG5(X0,X1,X2,X3) | 'Nil'(X0) != X2) [ennf transformation 91]
143. ! [X0 : $tType,X1 : 'list()'(X0),X2 : X0,X3 : 'list()'(X0)] : (s(len(X0,X1)) = mG4(X0,X1,X2,X3) | 'Cons'(X0,X2,X1) != X3) [ennf transformation 92]
144. ! [X0 : $tType,X1 : 'list()'(X0),X2 : X0,X3 : 'list()'(X0)] : (zero = mG4(X0,X1,X2,X3) | 'Nil'(X0) != X3) [ennf transformation 93]
145. ! [X0 : 'nat()',X1 : 'nat()',X2 : 'nat()'] : (mG2(X0,X1,X2) = mG3(X0,X1) | s(X1) != X2) [ennf transformation 94]
147. ! [X0 : 'nat()',X1 : 'nat()'] : (zero = mG3(X0,X1) | zero != X1) [ennf transformation 96]
152. ! [X0 : $tType,X1 : X0,X2 : 'list()'(X0),X3 : 'list()'(X0)] : (mG0(X0,X1,X2,X3) | 'Nil'(X0) != X3) [ennf transformation 104]
153. ? [X0 : $tType,X1 : 'list()'(X0)] : ~sorted(X0,mergesort(X0,X1)) [ennf transformation 105]
154. ! [X0 : $tType,X1 : 'list()'(X0),X2 : 'list()'(X0)] : (sorted(X0,merge(X0,X2,X1)) | (~sorted(X0,X2) | ~sorted(X0,X1))) [ennf transformation 120]
155. ! [X0 : $tType,X1 : 'list()'(X0),X2 : 'list()'(X0)] : (sorted(X0,merge(X0,X2,X1)) | ~sorted(X0,X2) | ~sorted(X0,X1)) [flattening 154]
164. ? [X0 : $tType,X1 : 'list()'(X0)] : ~sorted(X0,mergesort(X0,X1)) => ~sorted(sK14,mergesort(sK14,sK15)) [choice axiom]
165. ~sorted(sK14,mergesort(sK14,sK15)) [skolemisation 153,164]
166. ! [X0 : 'list()'(X3),X1 : X3,X2 : 'list()'(X3),X3 : $tType] : ((sorted(X3,X2) | ~mG0(X3,X1,X0,X2)) & (mG0(X3,X1,X0,X2) | ~sorted(X3,X2))) [nnf transformation 106]
182. mG7(X0,X1,X2,X3,X4,X5) = X4 | zero != X5 [cnf transformation 138]
183. mG5(X0,X1,X2,X3) = iG6(X0,X1,X2) | 'Cons'(X0,X3,X1) != X2 [cnf transformation 139]
184. iG6(X0,X1,X2) = merge(X0,mergesort(X0,take(X0,div2(len(X0,X2)),X2)),mergesort(X0,drop(X0,div2(len(X0,X2)),X2))) | 'Nil'(X0) = X1 [cnf transformation 140]
186. 'Nil'(X0) = mG5(X0,X1,X2,X3) | 'Nil'(X0) != X2 [cnf transformation 142]
187. s(len(X0,X1)) = mG4(X0,X1,X2,X3) | 'Cons'(X0,X2,X1) != X3 [cnf transformation 143]
188. zero = mG4(X0,X1,X2,X3) | 'Nil'(X0) != X3 [cnf transformation 144]
189. mG2(X0,X1,X2) = mG3(X0,X1) | s(X1) != X2 [cnf transformation 145]
191. zero = mG3(X0,X1) | zero != X1 [cnf transformation 147]
200. mG0(X0,X1,X2,X3) | 'Nil'(X0) != X3 [cnf transformation 152]
201. ~sorted(sK14,mergesort(sK14,sK15)) [cnf transformation 165]
203. ~mG0(X3,X1,X0,X2) | sorted(X3,X2) [cnf transformation 166]
208. div2(X2) = mG2(X0,X1,X2) [cnf transformation 110]
209. len(X3,X2) = mG4(X3,X0,X1,X2) [cnf transformation 111]
210. mergesort(X3,X2) = mG5(X3,X0,X2,X1) [cnf transformation 112]
211. drop(X5,X4,X3) = mG7(X5,X0,X2,X1,X3,X4) [cnf transformation 113]
216. sorted(X0,merge(X0,X2,X1)) | ~sorted(X0,X2) | ~sorted(X0,X1) [cnf transformation 155]
224. drop(X0,X5,X4) = X4 | zero != X5 [definition unfolding 182,211]
225. iG6(X0,X1,X2) = mergesort(X0,X2) | 'Cons'(X0,X3,X1) != X2 [definition unfolding 183,210]
226. 'Nil'(X0) = mergesort(X0,X2) | 'Nil'(X0) != X2 [definition unfolding 186,210]
227. len(X0,X3) = s(len(X0,X1)) | 'Cons'(X0,X2,X1) != X3 [definition unfolding 187,209]
228. len(X0,X3) = zero | 'Nil'(X0) != X3 [definition unfolding 188,209]
229. div2(X2) = mG3(X0,X1) | s(X1) != X2 [definition unfolding 189,208]
242. drop(X0,zero,X4) = X4 [equality resolution 224]
243. iG6(X0,X1,'Cons'(X0,X3,X1)) = mergesort(X0,'Cons'(X0,X3,X1)) [equality resolution 225]
245. 'Nil'(X0) = mergesort(X0,'Nil'(X0)) [equality resolution 226]
246. s(len(X0,X1)) = len(X0,'Cons'(X0,X2,X1)) [equality resolution 227]
247. zero = len(X0,'Nil'(X0)) [equality resolution 228]
248. div2(s(X1)) = mG3(X0,X1) [equality resolution 229]
250. zero = mG3(X0,zero) [equality resolution 191]
259. mG0(X0,X1,X2,'Nil'(X0)) [equality resolution 200]
265. zero = div2(s(zero)) [forward demodulation 250,248]
270. ! [X2 : 'list()'(sK14),X1 : sK14] : (((sorted(sK14,mergesort(sK14,drop(sK14,div2(len(sK14,'Cons'(sK14,X1,X2))),'Cons'(sK14,X1,X2)))) & sorted(sK14,mergesort(sK14,take(sK14,div2(len(sK14,'Cons'(sK14,X1,X2))),'Cons'(sK14,X1,X2))))) => sorted(sK14,mergesort(sK14,'Cons'(sK14,X1,X2)))) & sorted(sK14,mergesort(sK14,'Nil'(sK14)))) => ! [X4 : 'list()'(sK14)] : sorted(sK14,mergesort(sK14,X4)) [structural induction hypothesis (recursion)]
271. ! [X4 : 'list()'(sK14)] : sorted(sK14,mergesort(sK14,X4)) | ? [X2 : 'list()'(sK14),X1 : sK14] : ((~sorted(sK14,mergesort(sK14,'Cons'(sK14,X1,X2))) & (sorted(sK14,mergesort(sK14,drop(sK14,div2(len(sK14,'Cons'(sK14,X1,X2))),'Cons'(sK14,X1,X2)))) & sorted(sK14,mergesort(sK14,take(sK14,div2(len(sK14,'Cons'(sK14,X1,X2))),'Cons'(sK14,X1,X2)))))) | ~sorted(sK14,mergesort(sK14,'Nil'(sK14)))) [ennf transformation 270]
272. ~sorted(sK14,mergesort(sK14,'Nil'(sK14))) | sorted(sK14,mergesort(sK14,take(sK14,div2(len(sK14,'Cons'(sK14,sK20,sK19))),'Cons'(sK14,sK20,sK19)))) | sorted(sK14,mergesort(sK14,X4)) [cnf transformation 271]
273. ~sorted(sK14,mergesort(sK14,'Nil'(sK14))) | sorted(sK14,mergesort(sK14,drop(sK14,div2(len(sK14,'Cons'(sK14,sK20,sK19))),'Cons'(sK14,sK20,sK19)))) | sorted(sK14,mergesort(sK14,X4)) [cnf transformation 271]
274. ~sorted(sK14,mergesort(sK14,'Nil'(sK14))) | ~sorted(sK14,mergesort(sK14,'Cons'(sK14,sK20,sK19))) | sorted(sK14,mergesort(sK14,X4)) [cnf transformation 271]
277. ~sorted(sK14,mergesort(sK14,'Nil'(sK14))) | ~sorted(sK14,mergesort(sK14,'Cons'(sK14,sK20,sK19))) [induction hyperresolution 201,274]
278. ~sorted(sK14,mergesort(sK14,'Nil'(sK14))) | sorted(sK14,mergesort(sK14,drop(sK14,div2(len(sK14,'Cons'(sK14,sK20,sK19))),'Cons'(sK14,sK20,sK19)))) [induction hyperresolution 201,273]
279. ~sorted(sK14,mergesort(sK14,'Nil'(sK14))) | sorted(sK14,mergesort(sK14,take(sK14,div2(len(sK14,'Cons'(sK14,sK20,sK19))),'Cons'(sK14,sK20,sK19)))) [induction hyperresolution 201,272]
280. ~sorted(sK14,'Nil'(sK14)) | sorted(sK14,mergesort(sK14,take(sK14,div2(len(sK14,'Cons'(sK14,sK20,sK19))),'Cons'(sK14,sK20,sK19)))) [forward demodulation 279,245]
281. sorted(sK14,mergesort(sK14,take(sK14,div2(s(len(sK14,sK19))),'Cons'(sK14,sK20,sK19)))) | ~sorted(sK14,'Nil'(sK14)) [forward demodulation 280,246]
283. 1 <=> sorted(sK14,'Nil'(sK14)) [avatar definition]
285. ~sorted(sK14,'Nil'(sK14)) <- (~1) [avatar component clause 283]
287. 2 <=> sorted(sK14,mergesort(sK14,take(sK14,div2(s(len(sK14,sK19))),'Cons'(sK14,sK20,sK19)))) [avatar definition]
289. sorted(sK14,mergesort(sK14,take(sK14,div2(s(len(sK14,sK19))),'Cons'(sK14,sK20,sK19)))) <- (2) [avatar component clause 287]
290. ~1 | 2 [avatar split clause 281,287,283]
291. ~sorted(sK14,'Nil'(sK14)) | sorted(sK14,mergesort(sK14,drop(sK14,div2(len(sK14,'Cons'(sK14,sK20,sK19))),'Cons'(sK14,sK20,sK19)))) [forward demodulation 278,245]
292. sorted(sK14,mergesort(sK14,drop(sK14,div2(s(len(sK14,sK19))),'Cons'(sK14,sK20,sK19)))) | ~sorted(sK14,'Nil'(sK14)) [forward demodulation 291,246]
294. 3 <=> sorted(sK14,mergesort(sK14,drop(sK14,div2(s(len(sK14,sK19))),'Cons'(sK14,sK20,sK19)))) [avatar definition]
296. sorted(sK14,mergesort(sK14,drop(sK14,div2(s(len(sK14,sK19))),'Cons'(sK14,sK20,sK19)))) <- (3) [avatar component clause 294]
297. ~1 | 3 [avatar split clause 292,294,283]
298. ~sorted(sK14,'Nil'(sK14)) | ~sorted(sK14,mergesort(sK14,'Cons'(sK14,sK20,sK19))) [forward demodulation 277,245]
300. 4 <=> sorted(sK14,mergesort(sK14,'Cons'(sK14,sK20,sK19))) [avatar definition]
302. ~sorted(sK14,mergesort(sK14,'Cons'(sK14,sK20,sK19))) <- (~4) [avatar component clause 300]
303. ~4 | ~1 [avatar split clause 298,283,300]
319. sorted(X0,'Nil'(X0)) [resolution 203,259]
322. $false <- (~1) [resolution 319,285]
323. 1 [avatar contradiction clause 322]
591. mergesort(X2,'Cons'(X2,X4,X3)) = merge(X2,mergesort(X2,take(X2,div2(len(X2,'Cons'(X2,X4,X3))),'Cons'(X2,X4,X3))),mergesort(X2,drop(X2,div2(len(X2,'Cons'(X2,X4,X3))),'Cons'(X2,X4,X3)))) | 'Nil'(X2) = X3 [superposition 184,243]
594. mergesort(X2,'Cons'(X2,X4,X3)) = merge(X2,mergesort(X2,take(X2,div2(s(len(X2,X3))),'Cons'(X2,X4,X3))),mergesort(X2,drop(X2,div2(s(len(X2,X3))),'Cons'(X2,X4,X3)))) | 'Nil'(X2) = X3 [forward demodulation 591,246]
761. 19 <=> zero = div2(s(len(sK14,sK19))) [avatar definition]
762. zero != div2(s(len(sK14,sK19))) <- (~19) [avatar component clause 761]
763. zero = div2(s(len(sK14,sK19))) <- (19) [avatar component clause 761]
770. sorted(sK14,mergesort(sK14,drop(sK14,zero,'Cons'(sK14,sK20,sK19)))) <- (3, 19) [backward demodulation 296,763]
773. sorted(sK14,mergesort(sK14,'Cons'(sK14,sK20,sK19))) <- (3, 19) [forward demodulation 770,242]
774. $false <- (3, ~4, 19) [subsumption resolution 773,302]
775. ~3 | 4 | ~19 [avatar contradiction clause 774]
1090. ~sorted(X0,mergesort(X0,drop(X0,div2(s(len(X0,X1))),'Cons'(X0,X2,X1)))) | ~sorted(X0,mergesort(X0,take(X0,div2(s(len(X0,X1))),'Cons'(X0,X2,X1)))) | sorted(X0,mergesort(X0,'Cons'(X0,X2,X1))) | 'Nil'(X0) = X1 [superposition 216,594]
1705. ~sorted(sK14,mergesort(sK14,take(sK14,div2(s(len(sK14,sK19))),'Cons'(sK14,sK20,sK19)))) | sorted(sK14,mergesort(sK14,'Cons'(sK14,sK20,sK19))) | 'Nil'(sK14) = sK19 <- (3) [resolution 1090,296]
1714. sorted(sK14,mergesort(sK14,'Cons'(sK14,sK20,sK19))) | 'Nil'(sK14) = sK19 <- (2, 3) [subsumption resolution 1705,289]
1715. 'Nil'(sK14) = sK19 <- (2, 3, ~4) [subsumption resolution 1714,302]
1719. zero != div2(s(len(sK14,'Nil'(sK14)))) <- (2, 3, ~4, ~19) [backward demodulation 762,1715]
1734. zero != div2(s(zero)) <- (2, 3, ~4, ~19) [forward demodulation 1719,247]
1735. $false <- (2, 3, ~4, ~19) [subsumption resolution 1734,265]
1736. ~2 | ~3 | 4 | 19 [avatar contradiction clause 1735]
1749. $false [avatar sat refutation 290,297,303,323,775,1736]
% SZS output end Proof for conjecture
% ------------------------------
% Version: Vampire 4.7 (commit )
% Linked with Z3 4.9.1.0  NOTFOUND
% Termination reason: Refutation

% Memory used [KB]: 6652
% Time elapsed: 0.060 s
% ------------------------------
% ------------------------------
