% (45587)lrs+10_1_ind=struct:sos=theory:sstl=1:drc=encompass:sp=occurrence:to=lpo:sik=recursion:nui=off:indoct=off:indao=off:urr=on_89 on lemma2 for (89ds/0Mi)
% (45584)lrs+10_1_ind=struct:sos=theory:sstl=1:drc=encompass:sp=occurrence:to=lpo:sik=recursion:nui=off:indoct=off:indao=on:urr=off_89 on lemma2 for (89ds/0Mi)
% (45586)lrs+10_1_ind=struct:sos=theory:sstl=1:drc=encompass:sp=occurrence:to=lpo:sik=recursion:nui=off:indoct=off:indao=off:urr=off_89 on lemma2 for (89ds/0Mi)
% (45590)lrs+10_1_ind=struct:sos=theory:sstl=1:drc=encompass:sp=occurrence:to=lpo:sik=recursion:nui=off:indoct=on:indao=off:urr=off_89 on lemma2 for (89ds/0Mi)
% (45585)lrs+10_1_ind=struct:sos=theory:sstl=1:drc=encompass:sp=occurrence:to=lpo:sik=recursion:nui=off:indoct=off:indao=on:urr=on_89 on lemma2 for (89ds/0Mi)
% (45589)lrs+10_1_ind=struct:sos=theory:sstl=1:drc=encompass:sp=occurrence:to=lpo:sik=recursion:nui=off:indoct=on:indao=on:urr=on_89 on lemma2 for (89ds/0Mi)
% (45591)lrs+10_1_ind=struct:sos=theory:sstl=1:drc=encompass:sp=occurrence:to=lpo:sik=recursion:nui=off:indoct=on:indao=off:urr=on_89 on lemma2 for (89ds/0Mi)
% (45588)lrs+10_1_ind=struct:sos=theory:sstl=1:drc=encompass:sp=occurrence:to=lpo:sik=recursion:nui=off:indoct=on:indao=on:urr=off_89 on lemma2 for (89ds/0Mi)
% (45592)lrs+10_1_ind=struct:sos=theory:sstl=1:drc=encompass:sp=occurrence:to=lpo:sik=recursion:nui=on:indoct=off:indao=on:urr=off_89 on lemma2 for (89ds/0Mi)
% (45594)lrs+10_1_ind=struct:sos=theory:sstl=1:drc=encompass:sp=occurrence:to=lpo:sik=recursion:nui=on:indoct=off:indao=off:urr=off_89 on lemma2 for (89ds/0Mi)
% (45593)lrs+10_1_ind=struct:sos=theory:sstl=1:drc=encompass:sp=occurrence:to=lpo:sik=recursion:nui=on:indoct=off:indao=on:urr=on_89 on lemma2 for (89ds/0Mi)
% (45596)lrs+10_1_ind=struct:sos=theory:sstl=1:drc=encompass:sp=occurrence:to=lpo:sik=recursion:nui=on:indoct=on:indao=on:urr=off_89 on lemma2 for (89ds/0Mi)
% (45597)lrs+10_1_ind=struct:sos=theory:sstl=1:drc=encompass:sp=occurrence:to=lpo:sik=recursion:nui=on:indoct=on:indao=on:urr=on_89 on lemma2 for (89ds/0Mi)
% (45595)lrs+10_1_ind=struct:sos=theory:sstl=1:drc=encompass:sp=occurrence:to=lpo:sik=recursion:nui=on:indoct=off:indao=off:urr=on_89 on lemma2 for (89ds/0Mi)
% (45596)First to succeed.
% (45593)Also succeeded, but the first one will report.
% (45596)Refutation found. Thanks to Tanya!
% SZS status Unsatisfiable for lemma2
% SZS output start Proof for lemma2
1. (leq(X0,X1,X2) = ~less(X0,X2,X1)) [input]
2. ! [X0 : $tType] : ! [X1 : X0] : leq(X0,X1,X1) [input]
3. ! [X0 : $tType] : ! [X2 : X0,X1 : X0,X3 : X0] : ((leq(X0,X1,X2) & leq(X0,X2,X3)) => leq(X0,X1,X3)) [input]
4. ! [X0 : $tType] : ! [X2 : X0,X1 : X0] : ((leq(X0,X1,X2) & leq(X0,X2,X1)) => X1 = X2) [input]
5. ! [X0 : $tType] : ! [X2 : X0,X1 : X0] : (leq(X0,X1,X2) | leq(X0,X2,X1)) [input]
6. (list_ge_elem(X0,X1,X2) = $match(X1,'Nil'(X0),$true,'Cons'(X0,X3,X4),~less(X0,X3,X2) & list_ge_elem(X0,X4,X2))) [input]
7. ! [X0 : $tType] : ! [X2 : X0,X1 : X0,X3 : 'list()'(X0)] : ((leq(X0,X1,X2) & list_ge_elem(X0,X3,X2)) => list_ge_elem(X0,X3,X1)) [input]
8. ~! [X0 : $tType] : ! [X2 : X0,X1 : X0,X3 : 'list()'(X0)] : ((leq(X0,X1,X2) & list_ge_elem(X0,X3,X2)) => list_ge_elem(X0,X3,X1)) [negated conjecture 7]
18. ! [X4 : 'list()'(X0),X3 : X0,X2 : X0,X1 : 'list()'(X0),X0 : $tType] : (list_ge_elem(X0,X1,X2) = $match(X1,'Nil'(X0),$true,'Cons'(X0,X3,X4),~less(X0,X3,X2) & list_ge_elem(X0,X4,X2))) [closure 6]
19. ! [X0 : $tType,X2 : X0,X3 : X0,X4 : 'list()'(X0),X1 : 'list()'(X0)] : ('Nil'(X0) = X1 => (mG0(X0,X2,X3,X4,X1) <=> $true)) [fool $match elimination 18]
20. ! [X0 : $tType,X2 : X0,X3 : X0,X4 : 'list()'(X0),X1 : 'list()'(X0)] : ('Cons'(X0,X3,X4) = X1 => (mG0(X0,X2,X3,X4,X1) <=> (~less(X0,X3,X2) & list_ge_elem(X0,X4,X2)))) [fool $match elimination 18]
21. ! [X4 : 'list()'(X0),X3 : X0,X2 : X0,X1 : 'list()'(X0),X0 : $tType] : (list_ge_elem(X0,X1,X2) <=> mG0(X0,X2,X3,X4,X1)) [fool elimination 18]
22. ! [X2 : X0,X1 : X0,X0 : $tType] : (leq(X0,X1,X2) = ~less(X0,X2,X1)) [closure 1]
23. ! [X2 : X0,X1 : X0,X0 : $tType] : (leq(X0,X1,X2) <=> ~less(X0,X2,X1)) [fool elimination 22]
24. ! [X0 : $tType,X1 : X0,X2 : X0,X3 : 'list()'(X0),X4 : 'list()'(X0)] : ('Cons'(X0,X2,X3) = X4 => (mG0(X0,X1,X2,X3,X4) <=> (~less(X0,X2,X1) & list_ge_elem(X0,X3,X1)))) [rectify 20]
25. ! [X0 : $tType,X1 : X0,X2 : X0,X3 : 'list()'(X0),X4 : 'list()'(X0)] : ('Cons'(X0,X2,X3) = X4 => (mG0(X0,X1,X2,X3,X4) <=> (~less(X0,X2,X1) & list_ge_elem(X0,X3,X1)))) [flattening 24]
26. ! [X0 : $tType,X1 : X0,X2 : X0,X3 : 'list()'(X0),X4 : 'list()'(X0)] : ('Nil'(X0) = X4 => (mG0(X0,X1,X2,X3,X4) <=> $true)) [rectify 19]
27. ! [X0 : $tType,X1 : X0,X2 : X0,X3 : 'list()'(X0),X4 : 'list()'(X0)] : ('Nil'(X0) = X4 => mG0(X0,X1,X2,X3,X4)) [true and false elimination 26]
28. ~! [X0 : $tType] : ! [X1 : X0,X2 : X0,X3 : 'list()'(X0)] : ((leq(X0,X2,X1) & list_ge_elem(X0,X3,X1)) => list_ge_elem(X0,X3,X2)) [rectify 8]
29. ~! [X0 : $tType,X1 : X0,X2 : X0,X3 : 'list()'(X0)] : ((leq(X0,X2,X1) & list_ge_elem(X0,X3,X1)) => list_ge_elem(X0,X3,X2)) [flattening 28]
30. ! [X0 : 'list()'(X4),X1 : X4,X2 : X4,X3 : 'list()'(X4),X4 : $tType] : (list_ge_elem(X4,X3,X2) <=> mG0(X4,X2,X1,X0,X3)) [rectify 21]
31. ! [X0 : $tType] : ! [X1 : X0,X2 : X0] : (leq(X0,X2,X1) | leq(X0,X1,X2)) [rectify 5]
32. ! [X0 : $tType,X1 : X0,X2 : X0] : (leq(X0,X2,X1) | leq(X0,X1,X2)) [flattening 31]
33. ! [X0 : $tType] : ! [X1 : X0,X2 : X0] : ((leq(X0,X2,X1) & leq(X0,X1,X2)) => X1 = X2) [rectify 4]
34. ! [X0 : $tType,X1 : X0,X2 : X0] : ((leq(X0,X2,X1) & leq(X0,X1,X2)) => X1 = X2) [flattening 33]
35. ! [X0 : $tType] : ! [X1 : X0,X2 : X0,X3 : X0] : ((leq(X0,X2,X1) & leq(X0,X1,X3)) => leq(X0,X2,X3)) [rectify 3]
36. ! [X0 : $tType,X1 : X0,X2 : X0,X3 : X0] : ((leq(X0,X2,X1) & leq(X0,X1,X3)) => leq(X0,X2,X3)) [flattening 35]
37. ! [X0 : $tType,X1 : X0] : leq(X0,X1,X1) [flattening 2]
38. ! [X0 : X2,X1 : X2,X2 : $tType] : (leq(X2,X1,X0) <=> ~less(X2,X0,X1)) [rectify 23]
39. ! [X0 : X2,X1 : X2,X2 : $tType] : (leq(X2,X1,X0) <=> ~less(X2,X0,X1)) [flattening 38]
40. ! [X0 : $tType,X1 : X0,X2 : X0,X3 : 'list()'(X0),X4 : 'list()'(X0)] : ((mG0(X0,X1,X2,X3,X4) <=> (~less(X0,X2,X1) & list_ge_elem(X0,X3,X1))) | 'Cons'(X0,X2,X3) != X4) [ennf transformation 25]
41. ! [X0 : $tType,X1 : X0,X2 : X0,X3 : 'list()'(X0),X4 : 'list()'(X0)] : (mG0(X0,X1,X2,X3,X4) | 'Nil'(X0) != X4) [ennf transformation 27]
42. ? [X0 : $tType,X1 : X0,X2 : X0,X3 : 'list()'(X0)] : (~list_ge_elem(X0,X3,X2) & (leq(X0,X2,X1) & list_ge_elem(X0,X3,X1))) [ennf transformation 29]
43. ? [X0 : $tType,X1 : X0,X2 : X0,X3 : 'list()'(X0)] : (~list_ge_elem(X0,X3,X2) & leq(X0,X2,X1) & list_ge_elem(X0,X3,X1)) [flattening 42]
44. ! [X0 : $tType,X1 : X0,X2 : X0] : (X1 = X2 | (~leq(X0,X2,X1) | ~leq(X0,X1,X2))) [ennf transformation 34]
45. ! [X0 : $tType,X1 : X0,X2 : X0] : (X1 = X2 | ~leq(X0,X2,X1) | ~leq(X0,X1,X2)) [flattening 44]
46. ! [X0 : $tType,X1 : X0,X2 : X0,X3 : X0] : (leq(X0,X2,X3) | (~leq(X0,X2,X1) | ~leq(X0,X1,X3))) [ennf transformation 36]
47. ! [X0 : $tType,X1 : X0,X2 : X0,X3 : X0] : (leq(X0,X2,X3) | ~leq(X0,X2,X1) | ~leq(X0,X1,X3)) [flattening 46]
48. ! [X0 : $tType,X1 : X0,X2 : X0,X3 : 'list()'(X0),X4 : 'list()'(X0)] : (((mG0(X0,X1,X2,X3,X4) | (less(X0,X2,X1) | ~list_ge_elem(X0,X3,X1))) & ((~less(X0,X2,X1) & list_ge_elem(X0,X3,X1)) | ~mG0(X0,X1,X2,X3,X4))) | 'Cons'(X0,X2,X3) != X4) [nnf transformation 40]
49. ! [X0 : $tType,X1 : X0,X2 : X0,X3 : 'list()'(X0),X4 : 'list()'(X0)] : (((mG0(X0,X1,X2,X3,X4) | less(X0,X2,X1) | ~list_ge_elem(X0,X3,X1)) & ((~less(X0,X2,X1) & list_ge_elem(X0,X3,X1)) | ~mG0(X0,X1,X2,X3,X4))) | 'Cons'(X0,X2,X3) != X4) [flattening 48]
50. ? [X0 : $tType,X1 : X0,X2 : X0,X3 : 'list()'(X0)] : (~list_ge_elem(X0,X3,X2) & leq(X0,X2,X1) & list_ge_elem(X0,X3,X1)) => (~list_ge_elem(sK1,sK4,sK3) & leq(sK1,sK3,sK2) & list_ge_elem(sK1,sK4,sK2)) [choice axiom]
51. ~list_ge_elem(sK1,sK4,sK3) & leq(sK1,sK3,sK2) & list_ge_elem(sK1,sK4,sK2) [skolemisation 43,50]
52. ! [X0 : 'list()'(X4),X1 : X4,X2 : X4,X3 : 'list()'(X4),X4 : $tType] : ((list_ge_elem(X4,X3,X2) | ~mG0(X4,X2,X1,X0,X3)) & (mG0(X4,X2,X1,X0,X3) | ~list_ge_elem(X4,X3,X2))) [nnf transformation 30]
53. ! [X0 : X2,X1 : X2,X2 : $tType] : ((leq(X2,X1,X0) | less(X2,X0,X1)) & (~less(X2,X0,X1) | ~leq(X2,X1,X0))) [nnf transformation 39]
54. list_ge_elem(X0,X3,X1) | ~mG0(X0,X1,X2,X3,X4) | 'Cons'(X0,X2,X3) != X4 [cnf transformation 49]
55. ~less(X0,X2,X1) | ~mG0(X0,X1,X2,X3,X4) | 'Cons'(X0,X2,X3) != X4 [cnf transformation 49]
56. mG0(X0,X1,X2,X3,X4) | less(X0,X2,X1) | ~list_ge_elem(X0,X3,X1) | 'Cons'(X0,X2,X3) != X4 [cnf transformation 49]
57. mG0(X0,X1,X2,X3,X4) | 'Nil'(X0) != X4 [cnf transformation 41]
58. list_ge_elem(sK1,sK4,sK2) [cnf transformation 51]
59. leq(sK1,sK3,sK2) [cnf transformation 51]
60. ~list_ge_elem(sK1,sK4,sK3) [cnf transformation 51]
61. mG0(X4,X2,X1,X0,X3) | ~list_ge_elem(X4,X3,X2) [cnf transformation 52]
62. ~mG0(X4,X2,X1,X0,X3) | list_ge_elem(X4,X3,X2) [cnf transformation 52]
63. leq(X0,X2,X1) | leq(X0,X1,X2) [cnf transformation 32]
64. ~leq(X0,X2,X1) | X1 = X2 | ~leq(X0,X1,X2) [cnf transformation 45]
65. ~leq(X0,X2,X1) | leq(X0,X2,X3) | ~leq(X0,X1,X3) [cnf transformation 47]
66. leq(X0,X1,X1) [cnf transformation 37]
67. ~leq(X2,X1,X0) | ~less(X2,X0,X1) [cnf transformation 53]
68. leq(X2,X1,X0) | less(X2,X0,X1) [cnf transformation 53]
69. mG0(X0,X1,X2,X3,'Cons'(X0,X2,X3)) | less(X0,X2,X1) | ~list_ge_elem(X0,X3,X1) [equality resolution 56]
70. ~mG0(X0,X1,X2,X3,'Cons'(X0,X2,X3)) | ~less(X0,X2,X1) [equality resolution 55]
71. ~mG0(X0,X1,X2,X3,'Cons'(X0,X2,X3)) | list_ge_elem(X0,X3,X1) [equality resolution 54]
72. mG0(X0,X1,X2,X3,'Nil'(X0)) [equality resolution 57]
73. ! [X0 : sK1,X1 : 'list()'(sK1)] : ((list_ge_elem(sK1,'Nil'(sK1),sK3) | ~list_ge_elem(sK1,'Nil'(sK1),sK2)) & ((list_ge_elem(sK1,X1,sK3) | ~list_ge_elem(sK1,X1,sK2)) => (list_ge_elem(sK1,'Cons'(sK1,X0,X1),sK3) | ~list_ge_elem(sK1,'Cons'(sK1,X0,X1),sK2)))) => ! [X2 : 'list()'(sK1)] : (list_ge_elem(sK1,X2,sK3) | ~list_ge_elem(sK1,X2,sK2)) [structural induction hypothesis (one)]
74. ! [X2 : 'list()'(sK1)] : (list_ge_elem(sK1,X2,sK3) | ~list_ge_elem(sK1,X2,sK2)) | ? [X0 : sK1,X1 : 'list()'(sK1)] : ((~list_ge_elem(sK1,'Nil'(sK1),sK3) & list_ge_elem(sK1,'Nil'(sK1),sK2)) | ((~list_ge_elem(sK1,'Cons'(sK1,X0,X1),sK3) & list_ge_elem(sK1,'Cons'(sK1,X0,X1),sK2)) & (list_ge_elem(sK1,X1,sK3) | ~list_ge_elem(sK1,X1,sK2)))) [ennf transformation 73]
75. list_ge_elem(sK1,'Cons'(sK1,sK6,sK7),sK2) | ~list_ge_elem(sK1,'Nil'(sK1),sK3) | ~list_ge_elem(sK1,X2,sK2) | list_ge_elem(sK1,X2,sK3) [cnf transformation 74]
76. ~list_ge_elem(sK1,'Cons'(sK1,sK6,sK7),sK3) | ~list_ge_elem(sK1,'Nil'(sK1),sK3) | ~list_ge_elem(sK1,X2,sK2) | list_ge_elem(sK1,X2,sK3) [cnf transformation 74]
79. ~list_ge_elem(sK1,sK7,sK2) | list_ge_elem(sK1,sK7,sK3) | ~list_ge_elem(sK1,'Nil'(sK1),sK3) | ~list_ge_elem(sK1,X2,sK2) | list_ge_elem(sK1,X2,sK3) [cnf transformation 74]
90. ~list_ge_elem(sK1,sK7,sK2) | list_ge_elem(sK1,sK7,sK3) | ~list_ge_elem(sK1,'Nil'(sK1),sK3) [induction hyperresolution 58,60,79]
93. ~list_ge_elem(sK1,'Cons'(sK1,sK6,sK7),sK3) | ~list_ge_elem(sK1,'Nil'(sK1),sK3) [induction hyperresolution 58,60,76]
94. list_ge_elem(sK1,'Cons'(sK1,sK6,sK7),sK2) | ~list_ge_elem(sK1,'Nil'(sK1),sK3) [induction hyperresolution 58,60,75]
118. 2 <=> list_ge_elem(sK1,'Nil'(sK1),sK3) [avatar definition]
120. ~list_ge_elem(sK1,'Nil'(sK1),sK3) <- (~2) [avatar component clause 118]
164. 11 <=> list_ge_elem(sK1,'Cons'(sK1,sK6,sK7),sK2) [avatar definition]
166. list_ge_elem(sK1,'Cons'(sK1,sK6,sK7),sK2) <- (11) [avatar component clause 164]
167. ~2 | 11 [avatar split clause 94,164,118]
169. 12 <=> list_ge_elem(sK1,'Cons'(sK1,sK6,sK7),sK3) [avatar definition]
171. ~list_ge_elem(sK1,'Cons'(sK1,sK6,sK7),sK3) <- (~12) [avatar component clause 169]
172. ~2 | ~12 [avatar split clause 93,169,118]
176. 13 <=> list_ge_elem(sK1,sK7,sK3) [avatar definition]
178. list_ge_elem(sK1,sK7,sK3) <- (13) [avatar component clause 176]
180. 14 <=> list_ge_elem(sK1,sK7,sK2) [avatar definition]
183. ~2 | 13 | ~14 [avatar split clause 90,180,176,118]
194. ~less(X0,X1,X1) [resolution 67,66]
195. ~less(X2,X3,X4) | leq(X2,X3,X4) [resolution 67,63]
230. list_ge_elem(X0,'Nil'(X0),X1) [resolution 62,72]
232. $false <- (~2) [resolution 230,120]
233. 2 [avatar contradiction clause 232]
248. ~leq(sK1,sK2,X0) | leq(sK1,sK3,X0) [resolution 65,59]
253. ~list_ge_elem(X0,'Cons'(X0,X1,X3),X2) | ~less(X0,X1,X2) [resolution 70,61]
270. ~list_ge_elem(X0,'Cons'(X0,X3,X1),X2) | list_ge_elem(X0,X1,X2) [resolution 71,61]
294. list_ge_elem(X8,'Cons'(X8,X9,X11),X10) | ~list_ge_elem(X8,X11,X10) | less(X8,X9,X10) [resolution 69,62]
571. leq(sK1,sK3,X0) | less(sK1,X0,sK2) [resolution 248,68]
661. ~less(sK1,sK6,sK2) <- (11) [resolution 253,166]
664. list_ge_elem(sK1,sK7,sK2) <- (11) [resolution 270,166]
770. ~list_ge_elem(sK1,sK7,sK3) | less(sK1,sK6,sK3) <- (~12) [resolution 294,171]
779. less(sK1,sK6,sK3) <- (~12, 13) [subsumption resolution 770,178]
793. leq(sK1,sK6,sK3) <- (~12, 13) [resolution 779,195]
877. sK3 = sK6 | ~leq(sK1,sK3,sK6) <- (~12, 13) [resolution 793,64]
880. 66 <=> leq(sK1,sK3,sK6) [avatar definition]
882. ~leq(sK1,sK3,sK6) <- (~66) [avatar component clause 880]
884. 67 <=> sK3 = sK6 [avatar definition]
886. sK3 = sK6 <- (67) [avatar component clause 884]
887. ~66 | 67 | 12 | ~13 [avatar split clause 877,176,169,884,880]
995. less(sK1,sK6,sK2) <- (~66) [resolution 882,571]
999. $false <- (11, ~66) [subsumption resolution 995,661]
1000. ~11 | 66 [avatar contradiction clause 999]
1005. less(sK1,sK3,sK3) <- (~12, 13, 67) [backward demodulation 779,886]
1013. $false <- (~12, 13, 67) [subsumption resolution 1005,194]
1014. 12 | ~13 | ~67 [avatar contradiction clause 1013]
1017. 14 | ~11 [avatar split clause 664,164,180]
1018. $false [avatar sat refutation 167,172,183,233,887,1000,1014,1017]
% SZS output end Proof for lemma2
% (45596)------------------------------
% (45596)Version: Vampire 4.7 (commit )
% (45596)Linked with Z3 4.9.1.0  NOTFOUND
% (45596)Termination reason: Refutation

% (45596)Memory used [KB]: 6012
% (45596)Time elapsed: 0.015 s
% (45596)------------------------------
% (45596)------------------------------
% (45583)Success in time 0.016 s
